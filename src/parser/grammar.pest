WHITESPACE = _{" " | NEWLINE}
COMMENT = _{ (("//" ~ (!NEWLINE ~ ANY)*) | ("/*" ~ ( "/**/" | (!"*/" ~ ANY) )* ~ "*/")) }

// Tokens
DOT        = _{"."}
STR_MARK   = _{"\"" | "'"}
COLON      = _{":"}
UNDERSCORE = _{"_"}
ASGN       = _{ "=" }
COMMA      = _{","}
SEMI_COLON = _{";"}

minus = {"-"}
sum   = {"+"}
div   = {"/"}
times = {"*"}

gt  = {">"}
gte = {">="}
lt  = {"<"}
lte = {"<="}
eq  = {"=="}
ne  = {"!="}

L_BRACKET = _{"{"}
R_BRACKET = _{"}"}
L_PAREN   = _{"("}
R_PAREN   = _{")"}
L_SQUARE  = _{"["}
R_SQUARE  = _{"]"}

AND = _{"AND"}
OR  = _{"OR"}
not = {"NOT"}

bool      = {"bool"}
float     = {"float"}
int       = {"int"}
string    = {"string"}
void      = {"void"}

FUNC   = _{"func"}
MAIN   = _{"main"}
IF     = _{"if"}
ELSE   = _{"else"}
PRINT  = _{"print"}
WHILE  = _{"while"}
FOR    = _{"for"}
TO     = _{"to"}
global = {"global"}
INPUT  = _{"input"}

TRUE  = _{"true"}
FALSE = _{"false"}

READ_CSV_KEY = _{"read_csv"}

average  = {"average"}
std      = {"std"}
median   = {"median"}
variance = {"variance"}
min      = {"min"}
max      = {"max"}
range    = {"range"}

CORREL = _{"correlation"}

PLOT_KEY      = _{"plot"}
HISTOGRAM_KEY = _{"histogram"}

RETURN_KEY = _{"return"}

DECLARE_KEY = _{"declare_arr"}

// Grammar

art_op  = {minus | sum}
fact_op = {div | times}

comp_op = { eq | ne }
rel_op  = { gte | lte | gt | lt }

KEYWORD_TYPE = _{
  AND           |
  OR            |
  not           |
  bool          |
  float         |
  int           |
  string        |
  void          |
  FUNC          |
  MAIN          |
  IF            |
  ELSE          |
  PRINT         |
  WHILE         |
  FOR           |
  TO            |
  global        |
  INPUT         |
  TRUE          |
  FALSE         |
  READ_CSV_KEY  |
  average       |
  std           |
  median        |
  variance      |
  min           |
  max           |
  range         |
  CORREL        |
  PLOT_KEY      |
  HISTOGRAM_KEY |
  RETURN_KEY    |
  DECLARE_KEY
}
KEYWORD = _{ KEYWORD_TYPE ~ !ID_SUFFIX }

ID_SUFFIX = _{ ASCII_ALPHANUMERIC | UNDERSCORE }
id = @{ !KEYWORD ~ ASCII_ALPHA ~ ID_SUFFIX* }

bool_cte     = @{ TRUE | FALSE }
int_cte      = @{ minus? ~ ASCII_DIGIT+ }
float_cte    = @{ int_cte ~ DOT ~ ASCII_DIGIT+ }
string_value = { (!PEEK ~ ANY)* }
STRING_CTE   = _{ PUSH(STR_MARK) ~ string_value ~ POP }
ATOM_CTE     = _{ bool_cte | float_cte | int_cte | STRING_CTE }
arr_index    = _{ L_SQUARE ~ expr ~ R_SQUARE }
arr_val      = { id ~ arr_index{1,2} }
NON_CTE      = _{ dataframe_value_ops | func_call | arr_val | id }
VAR_VAL      = _{ ATOM_CTE | NON_CTE }

expr          = { and_term ~ (OR ~ and_term)* }
and_term      = { comp_term ~ (AND ~ comp_term)* }
comp_term     = { rel_term ~ (comp_op ~ rel_term)? }
rel_term      = { art_term ~ (rel_op ~ art_term)? }
art_term      = { fact_term ~ (art_op ~ fact_term)* }
fact_term     = { operand ~ (fact_op ~ operand)* }
operand       = { not? ~ operand_value }
operand_value = { VAR_VAL | L_PAREN ~ expr ~ R_PAREN }
exprs         = { expr ~ (COMMA ~ expr)* }

atomic_types   = { bool | float | int | string }
types          = { atomic_types | void}

read = { INPUT ~ L_PAREN ~ R_PAREN }

declare_arr_type = {DECLARE_KEY ~ "<" ~ types ~ ">" ~ L_PAREN}
declare_arr      = { declare_arr_type ~ int_cte ~ (COMMA ~ int_cte)? ~ R_PAREN }

list_cte = { L_SQUARE ~ exprs ~ R_SQUARE }
mat_cte  = {L_SQUARE ~ list_cte ~ ( COMMA ~ list_cte )* ~ R_SQUARE }
arr_cte  = { list_cte | mat_cte }

assignment_exp    = { read | read_csv | expr | declare_arr | arr_cte }
assignee          = { arr_val | id }
assignment_base   = _{ assignee ~ ASGN ~ assignment_exp }
assignment        = { global? ~ assignment_base }
global_assignment = { assignment_base ~ SEMI_COLON }

block = { L_BRACKET ~ statement* ~ R_BRACKET }
block_or_statement = { block | inline_statement }

func_arg      = { id ~ COLON ~ atomic_types }
func_args     = { func_arg ~ (COMMA ~ func_arg)* }
FUNC_HEADER   = _{ FUNC ~ id ~ L_PAREN ~ func_args? ~ R_PAREN ~ COLON ~ types }
function      = { FUNC_HEADER ~ block }
MAIN_FUNCTION = _{ FUNC ~ MAIN ~ L_PAREN ~ R_PAREN ~ COLON ~ void ~ block }
func_call     = { id ~ L_PAREN ~ exprs? ~ R_PAREN }

COND_EXPR  = _{ L_PAREN ~ expr ~ R_PAREN }
if_block   = _{ IF ~ COND_EXPR ~ block_or_statement }
else_block = { ELSE ~ (block_or_statement | decision) }
decision   = { if_block ~ else_block? }

write = {PRINT ~ L_PAREN ~ exprs? ~ R_PAREN }

while_loop = {WHILE ~ COND_EXPR ~ block_or_statement}

for_loop = {FOR ~ L_PAREN ~ assignment ~ TO ~ expr ~ R_PAREN ~ block_or_statement}

possible_str        = {STRING_CTE | NON_CTE}
READ_CSV_EXTRA      = _{(COMMA ~ id){2}}
read_csv            = {READ_CSV_KEY ~ L_PAREN ~ possible_str ~ READ_CSV_EXTRA? ~ R_PAREN}
unary_dataframe_key = { average | std | median | variance | min | max | range }
unary_dataframe_op = { unary_dataframe_key ~ L_PAREN ~ id ~ COMMA ~ possible_str ~ R_PAREN }
TWO_COLUMNS_FUNC    = _{L_PAREN ~ id ~ (COMMA ~ possible_str){2} ~ R_PAREN}
correlation         = {CORREL ~ TWO_COLUMNS_FUNC}
dataframe_value_ops = {unary_dataframe_op | correlation}
plot                = {PLOT_KEY ~ TWO_COLUMNS_FUNC}
histogram           = {HISTOGRAM_KEY ~ L_PAREN ~ id ~ COMMA ~ possible_str ~ COMMA ~ expr ~ R_PAREN}
DATAFRAME_VOID_OPS  = _{plot | histogram}

return_statement = { RETURN_KEY ~ expr }

BLOCK_STATEMENT  = _{ decision | while_loop | for_loop }
INLINE_STATEMENT = _{ DATAFRAME_VOID_OPS | assignment | write | return_statement | func_call }
inline_statement = { INLINE_STATEMENT ~ SEMI_COLON }
statement        = { inline_statement | BLOCK_STATEMENT }

global_assignments = { global_assignment* }
program = { SOI ~ global_assignments ~ function* ~ MAIN_FUNCTION ~ EOI }
