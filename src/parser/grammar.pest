WHITESPACE = _{" " | NEWLINE}

// Tokens
DOT        = _{"."}
STR_MARK   = _{"\"" | "'"}
COLON      = _{":"}
UNDERSCORE = _{"_"}
ASGN       = _{ "=" }
COMMA      = _{","}
SEMI_COLON = _{";"}

minus = {"-"}
sum   = {"+"}
div   = {"/"}
times = {"*"}

gt  = {">"}
gte = {">="}
lt  = {"<"}
lte = {"<="}
eq  = {"=="}
ne  = {"!="}

L_BRACKET = _{"{"}
R_BRACKET = _{"}"}
L_PAREN   = _{"("}
R_PAREN   = _{")"}
L_SQUARE  = _{"["}
R_SQUARE  = _{"]"}

AND = _{"AND"}
OR  = _{"OR"}
not = {"NOT"}

bool      = {"bool"}
float     = {"float"}
int       = {"int"}
string    = {"string"}
DATAFRAME = {"Dataframe"}
void      = {"void"}

FUNC   = _{"func"}
MAIN   = _{"main"}
IF     = _{"if"}
ELSE   = _{"else"}
PRINT  = _{"print"}
WHILE  = _{"while"}
FOR    = _{"for"}
TO     = _{"to"}
global = {"global"}
INPUT  = _{"input"}

TRUE  = _{"true"}
FALSE = _{"false"}

READ_CSV_KEY = _{"read_csv"}
AVERAGE_KEY  = _{"average"}
STD_KEY      = _{"std"}
MODE_KEY     = _{"mode"}
VARIANCE_KEY = _{"variance"}
CORRELATION_KEY = {"correlation"}
PLOT_KEY = {"plot"}
HISTOGRAM_KEY = {"histogram"}

RETURN_KEY = _{"return"}

DECLARE_KEY = _{"declare_arr"}

// Grammar

art_op  = {minus | sum}
fact_op = {div | times}

comp_op = { eq | ne }
rel_op  = { gte | lte | gt | lt }

KEYWORD_TYPE = _{
  AND             |
  OR              |
  not             |
  bool            |
  float           |
  int             |
  string          |
  void            |
  FUNC            |
  MAIN            |
  IF              |
  ELSE            |
  PRINT           |
  WHILE           |
  FOR             |
  TO              |
  global          |
  INPUT           |
  TRUE            |
  FALSE           |
  READ_CSV_KEY    |
  AVERAGE_KEY     |
  STD_KEY         |
  MODE_KEY        |
  VARIANCE_KEY    |
  CORRELATION_KEY |
  PLOT_KEY        |
  HISTOGRAM_KEY   |
  RETURN_KEY      |
  DECLARE_KEY
}
KEYWORD = _{ KEYWORD_TYPE ~ !ID_SUFFIX }

ID_SUFFIX = _{ ASCII_ALPHANUMERIC | UNDERSCORE }
id = @{ !KEYWORD ~ ASCII_ALPHA ~ ID_SUFFIX* }

bool_cte     = @{ TRUE | FALSE }
int_cte      = @{ minus? ~ ASCII_DIGIT+ }
float_cte    = @{ int_cte ~ DOT ~ ASCII_DIGIT+ }
string_value = { (!PEEK ~ ANY)* }
STRING_CTE   = _{ PUSH(STR_MARK) ~ string_value ~ POP }
ATOM_CTE     = _{ bool_cte | float_cte | int_cte | STRING_CTE }
arr_cte      = { L_SQUARE ~ exprs ~ R_SQUARE }
CTE          = _{ arr_cte | ATOM_CTE }
ARR_INDEX    = { L_SQUARE ~ expr ~ R_SQUARE }
ARR_VAL      = { id ~ ARR_INDEX{1,2} }
NON_CTE      = _{ DATAFRAME_VALUE_OPS | func_call | ARR_VAL | id }
VAR_VAL      = _{ CTE | NON_CTE }

expr          = { and_term ~ (OR ~ and_term)* }
and_term      = { comp_term ~ (AND ~ comp_term)* }
comp_term     = { rel_term ~ (comp_op ~ rel_term)? }
rel_term      = { art_term ~ (rel_op ~ art_term)? }
art_term      = { fact_term ~ (art_op ~ fact_term)* }
fact_term     = { operand ~ (fact_op ~ operand)* }
operand       = { not? ~ operand_value }
operand_value = { VAR_VAL | L_PAREN ~ expr ~ R_PAREN }
exprs         = { expr ~ (COMMA ~ expr)* }

atomic_types   = { bool | float | int | string }
types          = { atomic_types | void}

read = { INPUT ~ L_PAREN ~ R_PAREN }

declare_arr_type = {DECLARE_KEY ~ "<" ~ types ~ ">" ~ L_PAREN}
declare_arr = { declare_arr_type ~ int_cte ~ (COMMA ~ int_cte)? ~ R_PAREN }
assignment_exp = { read | READ_CSV | expr | declare_arr }
assignment     = { global? ~ (ARR_VAL | id) ~ ASGN ~ assignment_exp }

block = { L_BRACKET ~ statement* ~ R_BRACKET }

func_arg      = { id ~ COLON ~ atomic_types }
func_args     = { func_arg ~ (COMMA ~ func_arg)* }
FUNC_HEADER   = _{ FUNC ~ id ~ L_PAREN ~ func_args? ~ R_PAREN ~ COLON ~ types }
function      = { FUNC_HEADER ~ block }
MAIN_FUNCTION = _{ FUNC ~ MAIN ~ L_PAREN ~ R_PAREN ~ COLON ~ void ~ block }
func_call     = { id ~ L_PAREN ~ exprs? ~ R_PAREN }

COND_EXPR  = _{ L_PAREN ~ expr ~ R_PAREN }
if_block   = _{ IF ~ COND_EXPR ~ block }
else_block = { ELSE ~ (block | decision) }
decision   = { if_block ~ else_block? }

write = {PRINT ~ L_PAREN ~ exprs? ~ R_PAREN }

while_loop = {WHILE ~ COND_EXPR ~ block}

for_loop = {FOR ~ L_PAREN ~ assignment ~ TO ~ expr ~ R_PAREN ~ block}

POSSIBLE_STR        = {STRING_CTE | NON_CTE}
READ_CSV_EXTRA      = {(COMMA ~ id){2}}
READ_CSV            = {READ_CSV_KEY ~ L_PAREN ~ POSSIBLE_STR ~ READ_CSV_EXTRA? ~ R_PAREN}
ONE_COLUMN_FUNC     = {L_PAREN ~ id ~ COMMA ~ POSSIBLE_STR ~ R_PAREN}
AVERAGE             = {AVERAGE_KEY ~ ONE_COLUMN_FUNC}
STD                 = {STD_KEY ~ ONE_COLUMN_FUNC}
MODE                = {MODE_KEY ~ ONE_COLUMN_FUNC}
VARIANCE            = {VARIANCE_KEY ~ ONE_COLUMN_FUNC}
TWO_COLUMNS_FUNC    = {L_PAREN ~ id ~ (COMMA ~ POSSIBLE_STR){2} ~ R_PAREN}
CORRELATION         = {CORRELATION_KEY ~ TWO_COLUMNS_FUNC}
PLOT                = {PLOT_KEY ~ TWO_COLUMNS_FUNC}
HISTOGRAM           = {HISTOGRAM_KEY ~ L_PAREN ~ id ~ COMMA ~ POSSIBLE_STR ~ COMMA ~ expr ~ R_PAREN}
DATAFRAME_VALUE_OPS = _{AVERAGE | STD | MODE | VARIANCE | CORRELATION}
DATAFRAME_VOID_OPS  = _{PLOT | HISTOGRAM}

return_statement = { RETURN_KEY ~ expr }

BLOCK_STATEMENT  = _{ decision | while_loop | for_loop }
INLINE_STATEMENT = _{ DATAFRAME_VOID_OPS | assignment | write | return_statement | func_call }
statement        = { INLINE_STATEMENT ~ SEMI_COLON | BLOCK_STATEMENT }

program = { SOI ~ function* ~ MAIN_FUNCTION ~ EOI }
